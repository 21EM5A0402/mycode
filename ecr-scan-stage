pipeline {
    agent any 
    environment {
        //once you sign up for Docker hub, use that user_id here
        registry = "narendra311777/mycode"
        //- update your credentials ID after creating credentials for connecting to Docker Hub
        registryCredential = 'docker'
        dockerImage = ''
        AWS_ACCOUNT_ID="371661025153"
        AWS_DEFAULT_REGION="ap-south-1" 
        IMAGE_REPO_NAME="narendra311777/mycode"
        IMAGE_TAG="latest"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
    }
       
    stages {
        stage('Cloning Git') {
            steps {
                //checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '', url: 'https://bitbucket.org/ananthkannan/mypythonrepo']]])       
                  checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/narendra311777/mycode.git']]])       
            }
            
        }
    
    // Building Docker images
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build registry
        }
      }
    }
    
     // Uploading Docker images into Docker Hub
    stage('Upload Image') {
     steps{    
         script {
            docker.withRegistry( '', registryCredential ) {
            dockerImage.push()
            }
        }
      }
    }
   
     // Uploading Docker images into AWS ECR
   stage('Pushing to ECR') {
     steps{  
         script {
               sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"
                sh "aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 371661025153.dkr.ecr.ap-south-1.amazonaws.com"
               sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
               //**********************
               
               sh '''  aws ecr start-image-scan --registry-id 371661025153 \
           --repository-name narendra311777/mycode \
           --image-id imageTag=${BUILD_NUMBER} --output json | tee ecr_start_scan_${BUILD_NUMBER}.txt'''


           sh ''' aws ecr describe-image-scan-findings --registry-id 371661025153 \
          --repository-name narendra311777/mycode \
          --image-id imageTag=${BUILD_NUMBER}  --output json | tee ecr_scanResult_${BUILD_NUMBER}.txt'''
               
       }
        }
      }
            
      stage('Set current my-cluster') {
      steps {
            withAWS(region: 'ap-south-1', credentials: 'aws') {
	      sh 'aws eks update-kubeconfig --name my-cluster --region ap-south-1'
	      sh 'kubectl config set-context arn:aws:eks:ap-south-1:371661025153:cluster/my-cluster'
              sh 'kubectl config view'
	      // sh 'aws eks update-kubeconfig --name my-cluster --kubeconfig /home/ubuntu/var/lib/jenkins/.kube/config'
             sh 'kubectl config use-context arn:aws:eks:ap-south-1:371661025153:cluster/my-cluster'
	    //  sh 'aws eks update-kubeconfig --name myeks --kubeconfig /home/ubuntu/.kube/config'
              

	    //sh 'aws eks update-kubeconfig --name myeks1 --kubeconfig /home/ubuntu/.kube/config'
            
	    //sh 'kubectl config use-context arn:aws:eks:ap-south-1:371661025153:cluster/myeks1'
	  
	     sh 'kubectl config current-context'
	    
             // sh 'aws eks --region ap-south-1 update-kubeconfig --name myeks'
              sh 'kubectl get nodes'
              sh 'kubectl get pods --all-namespaces'
              sh 'kubectl delete ns ram'
              sh 'kubectl create ns ram'
	            sh 'kubectl delete -f pod.yaml'
              sh 'kubectl create -f pod.yaml'
        }
      }
    }
       
   }
  
}
